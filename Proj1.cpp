//Nicole Katynski
//Proj 1
//To do list

#include<iostream>
#include<string>
#include<fstream>

using namespace std;

//2 global functions
//copy to 2d array
//each row represents item type
void copy2D()
{

}

//copy to 3d array
//2nd dim = type
//3rd dim = priority
void copy3D()
{

}


class ToDo
{	//default public for now
public:
	//generated by prog - in order - when created
	int ID;
	string title;

	//default description
	string description = "The user has left no description for this item";
	enum Type { Shopping, Dishes, Homework, Cooking, Laundry, PetCare };
	int priority[5] = { 1,2,3,4,5 };
	enum Status { Done, InProgress, OnHold, NotStarted };
	//date struct
	struct createDate
	{
		int createDay;
		int createMonth;
		int createYear;

	};
	//due date struct
	struct dueDate
	{
		int dueDay;
		int dueMonth;
		int dueYear;
	};
	//last modified date struct
	struct lastModDate
	{
		int modDay;
		int modMonth;
		int modYear;
	};

	//default private mem functions
private:
	//define each

	//need constructor
	//need copy constructor
	void addToDo()
	{
		//user enters attributes
		cout << "Enter task title (ex. Grocery Shopping)" << endl;
		cin >> title;

		cout << "Enter task type" << endl;
		string userType;
		//make an array to handle user input
		string types[6] = { "Shopping", "Dishes", "Homework", "Cooking", "Laundry", "Pet Care" };
		cin >> userType;

		if (userType == "Shopping" || userType == "shopping")
		{
			//Type = Shopping;??
			//how do i cin an enum?????
		}

		else if (userType == "Dishes" || userType == "dishes")
		{
			//Type = Dishes;
		}
		
		else if (userType == "Homework" || userType == "homework")
		{
			//Type = Homework;
		}

		else if (userType == "Cooking" || userType == "cooking")
		{
			//Type = Cooking;
		}

		else if (userType == "Laundry" || userType == "laundry")
		{
			//Type = Laundry;
		}

		else if (userType == "Pet Care" || userType == "Pet care" || userType == "pet care")
		{
			//Type = PetCare;
		}

		else
		{
			cout << "Please enter a valid job type" << endl;
			cin >> userType;
		}

		//handle job status
		//remember
		//enum Status { Done, InProgress, OnHold, NotStarted };
		string taskStatus[4] = { "Done", "InProgress", "OnHold", "NotStarted" };
		string status;
		cout << "Enter task status: (Done, In Progress, On Hold, or Not Started)" << endl;
		cin >> status;

		//handle user input
		if (status == "Done" || status == "done")
		{
			//Status = Done;
		}

		else if (status == "In Progress" || status == "In progress" || status == "in progress")
		{
			//Status = InProgress;
		}

		else if (status == "On Hold" || status == "On hold" || status == "on hold")
		{
			//Status = OnHold;
		}

		else if (status == "Not Started" || status == "Not started" || status == "not started")
		{
			//Status = NotStarted;
		}

		else
		{
			//invalid input
			cout << "Please enter one of the listed statuses" << endl;
			cin >> status;
		}

		//have user add a description
		cout << "Add a job description" << endl;
		string taskDescrip;
		cin >> taskDescrip;


		//using struct dueDate
		cout << "Enter task due date" << endl;
		//cin >> dueDate::dueMonth;
		//cin >> dueDate::dueDay;
		//cin >> dueDate::dueYear;
		//format
		//cout << "Due date =" << dueMonth << "/" << dueDay<< "/", dueYear << endl;

		cout << "Enter today's date (mm/dd/yyyy)" << endl;
		//cin >> createDate::createMonth;
		//cin >> createDate::createDay
		//cin >> createDate::createYear;

		//***calculate how many days you have to finish
		//given due date and create date
		//int daysLeft;
		//daysLeft = dueDay - createDay;



		//create ID
		int ID;
		//idk what to put for max num?????
		int MAX_ID = 9999999999;

		for (int i = 0; i < 9999999999; i++)
		{
			//generate id
			ID = i;
		}

		//showing user input before adding to list
		cout << "The following has been added to the To Do list" << endl;
		cout << "ID: " << ID << endl;
		//cout << "Task Type: " << Type << endl;
		cout << "Task Title: " << title << endl;

		//write code for task priority
		cout << "Task Priority: " << priority << endl;
		cout << "Task Status: " << status << endl;
		//fix due date code ----cout << "Due Date: " << dueDate << endl;
		//fix todays date code ---- cout << "Todays Date: " << createDate << endl;
		//cout << "You have " << daysLeft << " days to finish this task" << endl;
		
	}

	void editToDo()
	{
		string attribute;
		cout << "Which attribute do you want to edit?" << endl;
		cin >> attribute;
		//figure out which attribute
		//switch or if statement for task title,description, status
		//use if for now
		if (attribute == "Title" || attribute == "title")
		{
			cout << "Enter your title changes" << endl;
			cin >> title;
			cout << "New title: " << title << " ." << endl;
		}

		else if (attribute == "Description" || attribute == "description")
		{
			cout << "Enter your description changes" << endl;
			cin >> description;
		}

		else if (attribute == "Status" || attribute == "status")
		{
			cout << "Enter the new status" << endl;
			//cin >> status
		}

		//declare mod date (ask for todays date)
		cout << "Enter today's date - (mm/dd/yyyy)" << endl;
		//cin >> lastModDate::modDay;
		//cin >> lastModDate::modMonth;
		//cin >> lastModDate::modYear;
		//test modDate
		//cout << modMonth << "/" << modDay << "/" << modYear << endl;
	}
	void deleteToDo()
	{
		//ask for ID of num to be deleted
		cout << "Enter the ID of the item you want to delete" << endl;
		cin >> ID;

		cout << "Deleting " << ID << " " << endl;//some attribute 
		//delete ID;
	}
	void deleteByType()
	{
		string deleteType;
		cout << "Which type do you want to delete? (Shopping, Dishes, Homework, Cooking, Laundry, Pet Care"<< endl;
		//cin which type and delete
		cin >> deleteType;

		//check input
		if (deleteType == "Shopping" || deleteType == "shopping")
		{
			//delete[] Shopping;
		}

		else if (deleteType == "Dishes" || deleteType == "dishes")
		{
			//delete[] Dishes;
		}

		else if (deleteType == "Homework" || deleteType == "homework")
		{
			//delete[] Homework;
		}

		else if (deleteType == "Cooking" || deleteType == "cooking")
		{
			//delete[] Cooking;
		}

		else if (deleteType == "Laundry" || deleteType == "laundry")
		{
			//delete[] Laundry;
		}

		else if (deleteType == "Pet Care" || deleteType == "Pet care" || deleteType == "pet care")
		{
			//delete[] PetCare;
		}
	}
	void deleteByStatus()
	{
		string deleteStatus;
		cout << "Which status do you want to delete? (Done, In Progress, On Hold, or Not Started)" << endl;
		cin >> deleteStatus;

		//check input
		if (deleteStatus == "Done" || deleteStatus == "done")
		{
			//delete[] Done;
		}

		else if (deleteStatus == "In Progress" || deleteStatus == "In progress" || deleteStatus == "in progress")
		{
			//delete[] InProgress
		}
		
		else if (deleteStatus == "On Hold" || deleteStatus == "On hold" || deleteStatus == "on hold")
		{
			//delete[] OnHold;
		}

		else if (deleteStatus == "Not Started" || deleteStatus == "No tstarted" || deleteStatus == "not started")
		{
			//delete[] NotStarted;
		}
	}
	void writeToText()
	{
		//writing TO a text file
		ofstream myFile;
		myFile.open("ToDo.txt");
		//myFile << "WRITING THE TO DO LIST HERE IN THIS FILE;
		myFile.close();
	}
	void readFromText()
	{
		//reading my to do list FROM the file i just wrote to
		string thisLine;
		ifstream myfile("ToDo.txt");
		if (myfile.is_open())
		{
			while (getline(myfile, thisLine))
			{
				cout << thisLine << '\n';
			}
			myfile.close();
		}

		else
		{
			cout << "Unable to open file";
		}

	}
	void printList()
	{

	}
	void mergeList()
	{

	}
	void cloneList()
	{

	}

};

int main()
{
	int choice;
	//create user menu
	cout << "Enter the number of an action from the menu" << endl << endl;
	cout << " 1 - Add to Do" << endl;
	cout << " 2 - Edit to Do" << endl;
	cout << " 3 - Delete by task status" << endl;
	cout << " 4 - Write your list to a file" << endl;
	cout << " 5 - Read your list from a file" << endl;

	//sort by priority OR due date OR create date OR Type
	//TYPE inner sort by priority/due date
	cout << " 6 - Sort your file" << endl;

	//options to print all items, by type, by priority, 1 item by ID
	cout << " 7 - Print your list" << endl;

	cout << " 8 - Merge list" << endl;
	cout << " 9 - Clone list" << endl;

	cin >> choice;
	switch (choice)
	case 1:
		//add to do
		//call add function
	case 2:
		//edit to do
		//call edit function
	case 3:
		//delete to do
		//call delete function
		//delete one task OR multiple by diff parameters
		//cout << "3 - Delete one task" << endl;
		//cout << "4 - Delete multiple by type of task" << endl;
	case 4:
		//write to file
		//call write fn
	case 5:
		//read from file
		//call read fn
	case 6:
		//sort file
		//by diff parameters
	case 7:
		//print list
	case 8:
		//merge list
	case 9:
		//clone list
	

	return 0;
	
}